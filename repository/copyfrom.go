// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForCreateOption implements pgx.CopyFromSource.
type iteratorForCreateOption struct {
	rows                 []CreateOptionParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOption) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOption) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PollID,
		r.rows[0].Content,
	}, nil
}

func (r iteratorForCreateOption) Err() error {
	return nil
}

func (q *Queries) CreateOption(ctx context.Context, db DBTX, arg []CreateOptionParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"options"}, []string{"poll_id", "content"}, &iteratorForCreateOption{rows: arg})
}

// iteratorForCreateTag implements pgx.CopyFromSource.
type iteratorForCreateTag struct {
	rows                 []string
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTag) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTag) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0],
	}, nil
}

func (r iteratorForCreateTag) Err() error {
	return nil
}

func (q *Queries) CreateTag(ctx context.Context, db DBTX, name []string) (int64, error) {
	return db.CopyFrom(ctx, []string{"tags"}, []string{"name"}, &iteratorForCreateTag{rows: name})
}
