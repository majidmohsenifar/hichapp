// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: poll.sql

package repository

import (
	"context"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls (
    title
    ) VALUES (
    $1
) RETURNING id, title, created_at
`

func (q *Queries) CreatePoll(ctx context.Context, db DBTX, title string) (Poll, error) {
	row := db.QueryRow(ctx, createPoll, title)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const getLastCreatedPoll = `-- name: GetLastCreatedPoll :one
SELECT id, title, created_at FROM polls ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetLastCreatedPoll(ctx context.Context, db DBTX) (Poll, error) {
	row := db.QueryRow(ctx, getLastCreatedPoll)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const getPaginatedPollsByUserID = `-- name: GetPaginatedPollsByUserID :many
SELECT polls.id, polls.title, polls.created_at FROM polls  
LEFT JOIN votes ON polls.id = votes.poll_id AND votes.user_id = $1
WHERE votes.id IS NULL ORDER BY polls.id ASC LIMIT $2 OFFSET $3::BIGINT
`

type GetPaginatedPollsByUserIDParams struct {
	UserID  int64
	Limit   int32
	Column3 int64
}

func (q *Queries) GetPaginatedPollsByUserID(ctx context.Context, db DBTX, arg GetPaginatedPollsByUserIDParams) ([]Poll, error) {
	rows, err := db.Query(ctx, getPaginatedPollsByUserID, arg.UserID, arg.Limit, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poll
	for rows.Next() {
		var i Poll
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedPollsByUserIDTagID = `-- name: GetPaginatedPollsByUserIDTagID :many
SELECT polls.id, polls.title, polls.created_at FROM polls 
JOIN poll_tags ON polls.id = poll_tags.poll_id AND poll_tags.tag_id = $2
LEFT JOIN votes ON polls.id = votes.poll_id AND votes.user_id = $1
WHERE votes.id IS NULL ORDER BY polls.id ASC LIMIT $3 OFFSET $4::BIGINT
`

type GetPaginatedPollsByUserIDTagIDParams struct {
	UserID  int64
	TagID   int64
	Limit   int32
	Column4 int64
}

func (q *Queries) GetPaginatedPollsByUserIDTagID(ctx context.Context, db DBTX, arg GetPaginatedPollsByUserIDTagIDParams) ([]Poll, error) {
	rows, err := db.Query(ctx, getPaginatedPollsByUserIDTagID,
		arg.UserID,
		arg.TagID,
		arg.Limit,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Poll
	for rows.Next() {
		var i Poll
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPollByID = `-- name: GetPollByID :one
SELECT id, title, created_at FROM polls WHERE id = $1
`

func (q *Queries) GetPollByID(ctx context.Context, db DBTX, id int64) (Poll, error) {
	row := db.QueryRow(ctx, getPollByID, id)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}
