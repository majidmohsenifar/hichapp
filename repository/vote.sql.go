// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vote.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (
    poll_id,
    option_id,
    user_id,
    is_skipped
    ) VALUES (
    $1, $2, $3, $4
) RETURNING id, poll_id, option_id, user_id, is_skipped, created_at
`

type CreateVoteParams struct {
	PollID    int64
	OptionID  pgtype.Int8
	UserID    int64
	IsSkipped bool
}

func (q *Queries) CreateVote(ctx context.Context, db DBTX, arg CreateVoteParams) (Vote, error) {
	row := db.QueryRow(ctx, createVote,
		arg.PollID,
		arg.OptionID,
		arg.UserID,
		arg.IsSkipped,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.PollID,
		&i.OptionID,
		&i.UserID,
		&i.IsSkipped,
		&i.CreatedAt,
	)
	return i, err
}

const getVoteByPollIDAndUserID = `-- name: GetVoteByPollIDAndUserID :one
SELECT id, poll_id, option_id, user_id, is_skipped, created_at FROM votes WHERE poll_id = $1 AND user_id = $2
`

type GetVoteByPollIDAndUserIDParams struct {
	PollID int64
	UserID int64
}

func (q *Queries) GetVoteByPollIDAndUserID(ctx context.Context, db DBTX, arg GetVoteByPollIDAndUserIDParams) (Vote, error) {
	row := db.QueryRow(ctx, getVoteByPollIDAndUserID, arg.PollID, arg.UserID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.PollID,
		&i.OptionID,
		&i.UserID,
		&i.IsSkipped,
		&i.CreatedAt,
	)
	return i, err
}
