// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: option.sql

package repository

import (
	"context"
)

type CreateOptionParams struct {
	PollID  int64
	Content string
}

const getOptionsByPollID = `-- name: GetOptionsByPollID :many
SELECT id, poll_id, content, counts FROM options WHERE poll_id = $1 ORDER BY id ASC
`

func (q *Queries) GetOptionsByPollID(ctx context.Context, db DBTX, pollID int64) ([]Option, error) {
	rows, err := db.Query(ctx, getOptionsByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(
			&i.ID,
			&i.PollID,
			&i.Content,
			&i.Counts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionsByPollIDs = `-- name: GetOptionsByPollIDs :many
SELECT id, poll_id, content, counts FROM options 
WHERE poll_id = ANY($1::bigint[])
`

func (q *Queries) GetOptionsByPollIDs(ctx context.Context, db DBTX, dollar_1 []int64) ([]Option, error) {
	rows, err := db.Query(ctx, getOptionsByPollIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(
			&i.ID,
			&i.PollID,
			&i.Content,
			&i.Counts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionsContentAndCountByPollID = `-- name: GetOptionsContentAndCountByPollID :many
SELECT id, content, counts FROM options WHERE poll_id = $1
`

type GetOptionsContentAndCountByPollIDRow struct {
	ID      int64
	Content string
	Counts  int32
}

func (q *Queries) GetOptionsContentAndCountByPollID(ctx context.Context, db DBTX, pollID int64) ([]GetOptionsContentAndCountByPollIDRow, error) {
	rows, err := db.Query(ctx, getOptionsContentAndCountByPollID, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsContentAndCountByPollIDRow
	for rows.Next() {
		var i GetOptionsContentAndCountByPollIDRow
		if err := rows.Scan(&i.ID, &i.Content, &i.Counts); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementOptionVoteCount = `-- name: IncrementOptionVoteCount :exec
UPDATE options SET counts = counts + 1 WHERE id = $1
`

func (q *Queries) IncrementOptionVoteCount(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, incrementOptionVoteCount, id)
	return err
}
