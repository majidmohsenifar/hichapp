// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/majidmohsenifar/hichapp/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreatePoll provides a mock function with given fields: ctx, db, title
func (_m *MockQuerier) CreatePoll(ctx context.Context, db repository.DBTX, title string) (repository.Poll, error) {
	ret := _m.Called(ctx, db, title)

	if len(ret) == 0 {
		panic("no return value specified for CreatePoll")
	}

	var r0 repository.Poll
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, string) (repository.Poll, error)); ok {
		return rf(ctx, db, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, string) repository.Poll); ok {
		r0 = rf(ctx, db, title)
	} else {
		r0 = ret.Get(0).(repository.Poll)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, string) error); ok {
		r1 = rf(ctx, db, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreatePoll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePoll'
type MockQuerier_CreatePoll_Call struct {
	*mock.Call
}

// CreatePoll is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - title string
func (_e *MockQuerier_Expecter) CreatePoll(ctx interface{}, db interface{}, title interface{}) *MockQuerier_CreatePoll_Call {
	return &MockQuerier_CreatePoll_Call{Call: _e.mock.On("CreatePoll", ctx, db, title)}
}

func (_c *MockQuerier_CreatePoll_Call) Run(run func(ctx context.Context, db repository.DBTX, title string)) *MockQuerier_CreatePoll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_CreatePoll_Call) Return(_a0 repository.Poll, _a1 error) *MockQuerier_CreatePoll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreatePoll_Call) RunAndReturn(run func(context.Context, repository.DBTX, string) (repository.Poll, error)) *MockQuerier_CreatePoll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTag provides a mock function with given fields: ctx, db, name
func (_m *MockQuerier) CreateTag(ctx context.Context, db repository.DBTX, name string) (repository.Tag, error) {
	ret := _m.Called(ctx, db, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 repository.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, string) (repository.Tag, error)); ok {
		return rf(ctx, db, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, string) repository.Tag); ok {
		r0 = rf(ctx, db, name)
	} else {
		r0 = ret.Get(0).(repository.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, string) error); ok {
		r1 = rf(ctx, db, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTag'
type MockQuerier_CreateTag_Call struct {
	*mock.Call
}

// CreateTag is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - name string
func (_e *MockQuerier_Expecter) CreateTag(ctx interface{}, db interface{}, name interface{}) *MockQuerier_CreateTag_Call {
	return &MockQuerier_CreateTag_Call{Call: _e.mock.On("CreateTag", ctx, db, name)}
}

func (_c *MockQuerier_CreateTag_Call) Run(run func(ctx context.Context, db repository.DBTX, name string)) *MockQuerier_CreateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_CreateTag_Call) Return(_a0 repository.Tag, _a1 error) *MockQuerier_CreateTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateTag_Call) RunAndReturn(run func(context.Context, repository.DBTX, string) (repository.Tag, error)) *MockQuerier_CreateTag_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVote provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateVote(ctx context.Context, db repository.DBTX, arg repository.CreateVoteParams) (repository.Vote, error) {
	ret := _m.Called(ctx, db, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateVote")
	}

	var r0 repository.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateVoteParams) (repository.Vote, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.DBTX, repository.CreateVoteParams) repository.Vote); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(repository.Vote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.DBTX, repository.CreateVoteParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVote'
type MockQuerier_CreateVote_Call struct {
	*mock.Call
}

// CreateVote is a helper method to define mock.On call
//   - ctx context.Context
//   - db repository.DBTX
//   - arg repository.CreateVoteParams
func (_e *MockQuerier_Expecter) CreateVote(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateVote_Call {
	return &MockQuerier_CreateVote_Call{Call: _e.mock.On("CreateVote", ctx, db, arg)}
}

func (_c *MockQuerier_CreateVote_Call) Run(run func(ctx context.Context, db repository.DBTX, arg repository.CreateVoteParams)) *MockQuerier_CreateVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.DBTX), args[2].(repository.CreateVoteParams))
	})
	return _c
}

func (_c *MockQuerier_CreateVote_Call) Return(_a0 repository.Vote, _a1 error) *MockQuerier_CreateVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateVote_Call) RunAndReturn(run func(context.Context, repository.DBTX, repository.CreateVoteParams) (repository.Vote, error)) *MockQuerier_CreateVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
