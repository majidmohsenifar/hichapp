package router

import (
	"errors"
	"fmt"
	"log/slog"
	"net/http"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/majidmohsenifar/hichapp/config"
	"github.com/majidmohsenifar/hichapp/handler/api"
	"github.com/majidmohsenifar/hichapp/handler/api/middleware"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	"github.com/majidmohsenifar/hichapp/docs" // docs is generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

const (
	Service = "gateway-service"
)

// @license.name				Apache 2.0
// @license.url				http://www.apache.org/licenses/LICENSE-2.0.html
// @securityDefinitions.apikey	ApiKeyAuth
// @in							header
// @name						Authorization
// @query.collection.format	multi
// @externalDocs.description	OpenAPI
// @externalDocs.url			https://swagger.io/resources/open-api/
func New(
	pollHandler *api.PollHandler,
	statsHandler *api.StatsHandler,
	cfg *config.Config,
	reg *prometheus.Registry,
) *gin.Engine {
	docs.SwaggerInfo.Title = "HICHApp Gateway"
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Description = "HichApp API documentation"
	docs.SwaggerInfo.BasePath = "/"
	//docs.SwaggerInfo.Host = cfg.HttpAddress
	docs.SwaggerInfo.Host = "localhost:8000"
	docs.SwaggerInfo.Schemes = []string{"http"}

	r := gin.New()
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"},
		AllowHeaders:     []string{"Content-Type,Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, Accept, Origin, Cache-Control, X-Requested-With, Access-Control-Allow-Origin"},
		AllowCredentials: true,
	}))

	r.Use(globalRecover())

	r.NoRoute(func(c *gin.Context) {
		c.JSON(
			http.StatusNotFound,
			api.ResponseFailure{
				Success: false,
				Error: api.ErrorCode{
					Code:    http.StatusNotFound,
					Message: "URL not found",
				},
			})
	})

	proMid := middleware.NewPrometheus("gin", reg)
	proMid.Use(r)
	r.GET("/metrics", gin.WrapH(promhttp.HandlerFor(
		reg,
		promhttp.HandlerOpts{
			EnableOpenMetrics: true,
		},
	)))

	v1 := r.Group("/api/v1")
	{

		pollRoutes := v1.Group("/polls")
		{
			pollRoutes.POST("", pollHandler.Create)
			pollRoutes.GET("", pollHandler.List)
			pollRoutes.POST("/:id/vote", pollHandler.Vote)
			pollRoutes.POST("/:id/skip", pollHandler.Skip)
			pollRoutes.GET("/:id/stats", statsHandler.Stats)
		}

	}
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	})
	return r
}

func globalRecover() gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func(c *gin.Context) {
			if rec := recover(); rec != nil {
				err := errors.New("error 500")
				slog.Error(fmt.Sprintf("error  500 in global recover %v", rec), "err", err)
				api.MakeErrorResponseWithCode(c.Writer, http.StatusInternalServerError, err)
			}
		}(c)
		c.Next()
	}
}
