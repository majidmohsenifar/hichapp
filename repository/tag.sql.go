// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tag.sql

package repository

import (
	"context"
)

const getTagByName = `-- name: GetTagByName :one
SELECT id, name FROM tags WHERE name = $1
`

func (q *Queries) GetTagByName(ctx context.Context, db DBTX, name string) (Tag, error) {
	row := db.QueryRow(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagsByPollIDs = `-- name: GetTagsByPollIDs :many
SELECT id, name, poll_id, tag_id FROM tags JOIN poll_tags ON tags.id = poll_tags.tag_id 
WHERE poll_id = ANY($1::bigint[])
`

type GetTagsByPollIDsRow struct {
	ID     int64
	Name   string
	PollID int64
	TagID  int64
}

func (q *Queries) GetTagsByPollIDs(ctx context.Context, db DBTX, dollar_1 []int64) ([]GetTagsByPollIDsRow, error) {
	rows, err := db.Query(ctx, getTagsByPollIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsByPollIDsRow
	for rows.Next() {
		var i GetTagsByPollIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PollID,
			&i.TagID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
